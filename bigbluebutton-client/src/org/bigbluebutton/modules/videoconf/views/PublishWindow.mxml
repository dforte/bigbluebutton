<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<pubVid:MDIWindow xmlns="flexlib.mdi.containers.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:pubVid="flexlib.mdi.containers.*"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="init()"
	width="{camWidth + 6}" height="{camHeight + 75}" 
	title="{ResourceUtil.getInstance().getString('bbb.publishVideo.title')}" 
	backgroundImage="{bbbLogo}" 
	xmlns:mate="http://mate.asfusion.com/"
	resize="onResize()">
	
	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.LogUtil;
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			[Bindable] public var resolutions:Array = new Array("320x240", "640x480");
			
			private var video:Video;
			public var streamName:String;
			[Bindable] private var camWidth:Number = 320;
			[Bindable] private var camHeight:Number = 240;
			private var _userrole:String;
			public var quality:Number = 0;
			
			private var _bResizePossible:Boolean = true;
			private var _nAspectRatio:Number = 1;
			
			static private var _minWidth:int = 166;
			static private var _minHeight:int = 149;

			private var _nSavedVideoWidth:Number = 0;
			private var _nSavedVideoHeight:Number = 0;
			private var _nOldWindowWidth:Number = 0;
			private var _nOldWindowHeight:Number = 0;

			// Timer to make sure the video fits to window whenever the window is resized.
			private var fitToWindowTimer:Timer;
						
			private function init():void{
				currentState = "dispVideoOptionsControlBar";
				checkIfMacCamera();
				if (isPresenter()) showResControls(true);
				if (Camera.names.length > 1) showVideoControls(true);
				if (!isPresenter() && Camera.names.length == 1) startPublishing();
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEvent);
				addEventListener(MDIWindowEvent.RESIZE, onResizeEvent);
				addEventListener(MDIWindowEvent.MAXIMIZE, onMaximize);
				addEventListener(MDIWindowEvent.RESTORE, onRestore);

				this.minWidth = _minWidth;
				this.minHeight = _minHeight;
				maximizeRestoreBtn.visible = false;
				this.resizable = false;
				
				loadPrefs();
				minimize();
				this.visible = false;

				/*
				 * Need to have a timer to trigger resizing video to window after the 
				 * window has been maximized/restored. The MAXIMIZE/RESTORE events are
				 * generated when the button is clicked so the width and height are not
				 * the ones we want.
				 */
				fitToWindowTimer = new Timer(3000);
				fitToWindowTimer.addEventListener(TimerEvent.TIMER, maximizeTimerHandler);
				fitToWindowTimer.start();	
			}

			
			private function maximizeTimerHandler(event:TimerEvent):void {				
				startPublishing();
				fitToWindowTimer.stop();
			}
						
			private function loadPrefs():void{
				var sharedObject:SharedObject = SharedObject.getLocal("bbbUserProperties", "/");
				var webcam:String = sharedObject.data["webcam"] as String;
				for (var i:Number = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == webcam) cmbCameraSelector.selectedIndex = i;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
			
			private function startPublishing():void{
				var camera:Camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (camera == null) return;
				
				setResolution();
				
				camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight,15);
				camera.setQuality(0,quality);
				
				video = new Video(camWidth, camHeight);
				//Next two lines may seem redundant but they're not. Do not delete.
				video.width = camWidth;
				video.height = camHeight;
				adjustWindowSize();
				video.attachCamera(camera);
				videoHolder.addChild(video);
//				addChild(videoHolder);
				
				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = camera;
				dispatchEvent(e);
				
				showVideoControls(false);
				showResControls(false);

				maximizeRestoreBtn.visible = true;
				this.resizable = true;
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();
				super.close(event);
			}
			
			private function stopPublishing():void{
				if (video != null) {
					video.attachCamera(null);
					video.clear();
					video = null;
				}
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = this.streamName;
				dispatchEvent(e);
			}
			
			private function setResolution():void{
				var res:Array = cmbResolution.selectedLabel.split( "x" );
				camWidth = Number(res[0]);
				camHeight = Number(res[1]);
				_nAspectRatio = (camWidth/camHeight);
				
 				/**
         		* Add timestamp to create a unique stream name. This way we can record	 	
         		* stream without overwriting previously recorded streams.	 	
         		*/	 	
				var curTime:Number = new Date().getTime();	 	
        		this.streamName = cmbResolution.selectedLabel.concat(this.streamName) + "-" + curTime;
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function showVideoControls(show:Boolean):void{
				if (show){
					currentState = "dispVideoOptionsControlBar"
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = true;
				} else{					
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = false;
					currentState = "dispVideo";
				}
			}
			
			private function showResControls(show:Boolean):void{
				if (show) cmbResolution.visible = true;
				else cmbResolution.visible = false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				closeThisWindow();
			}
			
			private function closeThisWindow():void {
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") {
						/**
						 * Set as default for Macs
						 */
						cmbCameraSelector.selectedIndex = i;
					}
				}
			}
			
			private function adjustWindowSize():void{
				videoHolder.width = video.width;
				videoHolder.height = video.height;
				this.width = video.width + 6;
				this.height = video.height + 29;
				
				// prevent to show a video window bigger than the parent window
				if (this.width > this.parent.width) {
					video.width = this.parent.width - 6;
					video.height = Math.floor(video.width / _nAspectRatio);
					adjustWindowSize();
				}
				if (this.height > this.parent.height) {
					video.height = this.parent.height - 29;
					video.width = Math.floor(video.height * _nAspectRatio);
					adjustWindowSize();
				}
				if (this.width < _minWidth) {
					video.width = _minWidth - 6;
					video.height = Math.floor(video.width / _nAspectRatio);
					adjustWindowSize();
				}
				if (this.height < _minHeight) {
					video.height = _minHeight - 29;
					video.width = Math.floor(video.height * _nAspectRatio);
					adjustWindowSize();
				}
			}			
			
			public function onResizeEvent(event:MDIWindowEvent):void {
				if (event.type == MDIWindowEvent.RESIZE) {
					// test if we are already resizing
					if (_bResizePossible) {
						_bResizePossible = false;
						resizeWindow();
						_bResizePossible = true;
					}
				} else if (event.type == MDIWindowEvent.RESIZE_END) {
					adjustWindowSize();
				}
			}
			
			private function resizeWindow():void {
				// prevent the window for blinking
				if (this.width == _nOldWindowWidth && this.height == _nOldWindowHeight) {
					adjustWindowSize();
					return;
				}

				_nOldWindowWidth = this.width;
				_nOldWindowHeight = this.height;

				if (this.width == video.width + 6) {
					// if it's a vertical resizing
					video.height = this.height - 29;
					video.width = video.height * _nAspectRatio;
				} else {
					// if it's a horizontal resizing
					video.width = this.width - 6;
					video.height  = Math.floor (video.width / _nAspectRatio);
				}
				adjustWindowSize();
			}
			
			public function onMaximize(event:MDIWindowEvent):void {
				_nSavedVideoWidth = video.width;
				_nSavedVideoHeight = video.height;
			
			
				var tmpWidth:Number = this.parent.width - 6;
				var tmpHeight:Number = this.parent.height - 29;

				if (tmpWidth > tmpHeight * _nAspectRatio)
					tmpWidth = tmpHeight * _nAspectRatio;
				if (tmpHeight > Math.floor(tmpWidth / _nAspectRatio))
					tmpHeight = Math.floor(tmpWidth / _nAspectRatio);
				
				video.width = tmpWidth;
				video.height = tmpHeight;
				
				video.x = Math.floor ((this.parent.width - 6 - video.width) / 2);
				video.y = Math.floor ((this.parent.height - 29 - video.height) / 2);
			}
			
			public function onRestore(event:MDIWindowEvent):void {
//				video.x = 0;
//				video.y = 0;
//				video.width = _nSavedVideoWidth;
//				video.height = _nSavedVideoHeight;
//				adjustWindowSize();
			}

			public function setWindowWidth(width:int):void {
				if (video == null) return;
				
				video.width = width - 6;
				video.height = Math.floor(video.width / _nAspectRatio);
				adjustWindowSize();
			}
			
			static public function getMinWidth():int {
				return _minWidth;
			}
		
			static public function getMinHeight():int {
				return _minHeight;
			}
			
			static public function getWindowHeightByWidth(width:int, aspect:Number):int {
				return Math.floor((width - 6) / aspect) + 29;
			}
			
			static public function getWindowWidthByHeight(height:int, aspect:Number):int {
				return Math.floor((height - 29) * aspect) + 6;
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');
			}
			
			private function onResize():void{
				setWindowWidth(this.width);
			}
			
		]]>
	</mx:Script>

	<pubVid:states>
	    <!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
	    <mx:State name="dispVideo">
	    </mx:State>
        <!--mx:State name="dispQuitControlBar">   
            <mx:AddChild>
            	<mx:ControlBar id="quitOptionsBar">
            		<mx:Spacer width="50%"/>
					<mx:Button id="btnQuitPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.video.publish.close.tooltip')}" label="{ResourceUtil.getInstance().getString('bbb.video.publish.close.label')}" visible="true" click="closeThisWindow()" />
					<mx:Spacer width="50%"/>
				</mx:ControlBar>	
            </mx:AddChild>
        </mx:State-->		
        <mx:State name="dispVideoOptionsControlBar">   
            <mx:AddChild>
				<mx:ControlBar id="videoOptionsBar">
					<mx:Button id="btnStartPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip')}" icon="{camIcon}" click="startPublishing()" />
					<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" width="150" visible="false" />
					<mx:ComboBox id="cmbResolution" dataProvider="{resolutions}" width="20%" visible="false" />
				</mx:ControlBar>
            </mx:AddChild>
        </mx:State>	
	</pubVid:states>
		
	<mx:UIComponent id="videoHolder" width="{camWidth}" height="{camHeight}" />

	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</pubVid:MDIWindow>
